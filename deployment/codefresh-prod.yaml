version: '1.0'
stages:
- prepare
- deploy
- publish
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}'
    git: github
  post_main_clone:
    title: Post main clone
    type: parallel
    stage: prepare
    steps:
    - title: Cloning cloud-harness repository...
      type: git-clone
      stage: prepare
      repo: https://github.com/MetaCell/cloud-harness.git
      revision: '${{CLOUDHARNESS_BRANCH}}'
      working_directory: .
      git: github
  prepare_deployment:
    title: Prepare helm chart
    image: python:3.7
    stage: prepare
    working_directory: .
    commands:
    - bash cloud-harness/install.sh
    - harness-deployment cloud-harness . -m build -t ${{DEPLOYMENT_TAG}} -d ${{DOMAIN}}
      -r ${{REGISTRY}} -n ${{NAMESPACE}} -rs ${{REGISTRY_SECRET}} -e prod -i osb-portal
  prepare_deployment_view:
    commands:
    - helm template ./deployment/helm --debug -n ${{NAMESPACE}}
    environment:
    - ACTION=auth
    - KUBE_CONTEXT=${{NAMESPACE}}
    image: codefresh/cfstep-helm:3.6.2
    stage: prepare
    title: View helm chart
  deployment:
    stage: deploy
    image: codefresh/cfstep-helm:3.6.2
    title: Installing chart
    environment:
    - CHART_REF=./deployment/helm
    - RELEASE_NAME=${{NAMESPACE}}
    - KUBE_CONTEXT=${{CLUSTER_NAME}}
    - NAMESPACE=${{NAMESPACE}}
    - CHART_VERSION=${{DEPLOYMENT_PUBLISH_TAG}}
    - HELM_REPO_USE_HTTP=false
    - HELM_REPO_CONTEXT_PATH=
    - TIMEOUT=600s
    - VALUESFILE_values=./deployment/helm/values.yaml
  approval:
    type: pending-approval
    stage: publish
    title: Approve
    description: Approve publication
    timeout:
      duration: 168
      finalState: approved
  publish:
    type: parallel
    stage: publish
    steps:
      publish_cloudharness-base:
        stage: publish
        type: push
        title: Cloudharness base
        candidate: '${{REGISTRY}}/osb/cloudharness-base:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-frontend-build:
        stage: publish
        type: push
        title: Cloudharness frontend build
        candidate: '${{REGISTRY}}/osb/cloudharness-frontend-build:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-flask:
        stage: publish
        type: push
        title: Cloudharness flask
        candidate: '${{REGISTRY}}/osb/cloudharness-flask:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_notifications:
        stage: publish
        type: push
        title: Notifications
        candidate: '${{REGISTRY}}/osb/notifications:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_accounts:
        stage: publish
        type: push
        title: Accounts
        candidate: '${{REGISTRY}}/osb/accounts:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_volumemanager:
        stage: publish
        type: push
        title: Volumemanager
        candidate: '${{REGISTRY}}/osb/volumemanager:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_sentry:
        stage: publish
        type: push
        title: Sentry
        candidate: '${{REGISTRY}}/osb/sentry:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_jupyterhub:
        stage: publish
        type: push
        title: Jupyterhub
        candidate: '${{REGISTRY}}/osb/jupyterhub:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_samples:
        stage: publish
        type: push
        title: Samples
        candidate: '${{REGISTRY}}/osb/samples:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_samples-print-file:
        stage: publish
        type: push
        title: Samples print file
        candidate: '${{REGISTRY}}/osb/samples-print-file:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_samples-sum:
        stage: publish
        type: push
        title: Samples sum
        candidate: '${{REGISTRY}}/osb/samples-sum:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_common:
        stage: publish
        type: push
        title: Common
        candidate: '${{REGISTRY}}/osb/common:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_events:
        stage: publish
        type: push
        title: Events
        candidate: '${{REGISTRY}}/osb/events:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-send-result-event:
        stage: publish
        type: push
        title: Workflows send result event
        candidate: '${{REGISTRY}}/osb/workflows-send-result-event:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-extract-download:
        stage: publish
        type: push
        title: Workflows extract download
        candidate: '${{REGISTRY}}/osb/workflows-extract-download:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-notify-queue:
        stage: publish
        type: push
        title: Workflows notify queue
        candidate: '${{REGISTRY}}/osb/workflows-notify-queue:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows:
        stage: publish
        type: push
        title: Workflows
        candidate: '${{REGISTRY}}/osb/workflows:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces-figshare-copy:
        stage: publish
        type: push
        title: Workspaces figshare copy
        candidate: '${{REGISTRY}}/osb/workspaces-figshare-copy:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces-scan-workspace:
        stage: publish
        type: push
        title: Workspaces scan workspace
        candidate: '${{REGISTRY}}/osb/workspaces-scan-workspace:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces-github-copy:
        stage: publish
        type: push
        title: Workspaces github copy
        candidate: '${{REGISTRY}}/osb/workspaces-github-copy:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces-dandi-copy:
        stage: publish
        type: push
        title: Workspaces dandi copy
        candidate: '${{REGISTRY}}/osb/workspaces-dandi-copy:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces:
        stage: publish
        type: push
        title: Workspaces
        candidate: '${{REGISTRY}}/osb/workspaces:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_netpyne:
        stage: publish
        type: push
        title: Netpyne
        candidate: '${{REGISTRY}}/osb/netpyne:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_accounts-api:
        stage: publish
        type: push
        title: Accounts api
        candidate: '${{REGISTRY}}/osb/accounts-api:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_osb-portal:
        stage: publish
        type: push
        title: Osb portal
        candidate: '${{REGISTRY}}/osb/osb-portal:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_nwb-explorer:
        stage: publish
        type: push
        title: Nwb explorer
        candidate: '${{REGISTRY}}/osb/nwb-explorer:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_jupyterlab:
        stage: publish
        type: push
        title: Jupyterlab
        candidate: '${{REGISTRY}}/osb/jupyterlab:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
    when:
      condition:
        all:
          whenVarExists: includes("${{DEPLOYMENT_PUBLISH_TAG}}", "{{DEPLOYMENT_PUBLISH_TAG}}")
            == false
  git-tag:
    title: Performing git tagging
    stage: publish
    image: alpine/git:latest
    commands:
    - git tag ${{DEPLOYMENT_PUBLISH_TAG}}
    - ORIGIN=$(git remote get-url origin)
    - PROTOCOL=https://
    - REPLACEMENT=${PROTOCOL}${{REPO_TOKEN}}@
    - git remote set-url origin ${ORIGIN/$PROTOCOL/$REPLACEMENT}
    - git push origin --tags
    when:
      condition:
        all:
          whenVarExists: includes("${{DEPLOYMENT_PUBLISH_TAG}}", "{{DEPLOYMENT_PUBLISH_TAG}}")
            == false
          whenVarExists2: includes("${{REPO_TOKEN}}", "{{REPO_TOKEN}}") == false
