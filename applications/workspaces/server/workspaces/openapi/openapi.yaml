openapi: 3.0.0
info:
  description: Opensource Brain Platform - Reference Workspaces manager API
  license:
    name: UNLICENSED
  title: Workspaces manager API
  version: 0.2.0
servers:
- description: SwaggerHub API Auto Mocking
  url: /api
tags:
- description: rest API for Workspaces manager
  name: rest
- description: Producer
  name: Producer
- description: Consumer
  name: Consumer
- description: Client
  name: Client
paths:
  /live:
    get:
      summary: Test if application is healthy
      security: []
      operationId: live
      responses:
        "500":
          description: Application is not healthy
        "200":
          description: Healthy
          content:
            application/json:
              schema:
                type: string
      x-openapi-router-controller: workspaces.controllers.k8s_controller
      tags:
        - k8s
  /ready:
    get:
      summary: Test if application is ready to take requests
      security: []
      operationId: ready
      responses:
        "500":
          description: Application is not ready yet
        "200":
          description: Ready
          content:
            application/json:
              schema:
                type: string
      x-openapi-router-controller: workspaces.controllers.k8s_controller
      tags:
        - k8s
  /workspace:
    get:
      tags:
        - rest
      summary: Used to list all available workspaces.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: The page number for starting to collect the result set.
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: q
          schema:
            type: string
            default: None
            example: name__like=Work%ce 18+id__=1
          required: false
          description: The search string for filtering of the items to return. Multiple criteria are seperated by '+'. Format [fieldname][comparator = , __not= , __like= ][value]     
      responses:
        200:
          description: Return all available workspaces
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  workspaces:
                    type: array
                    items:
                      $ref: "#/components/schemas/Workspace"
    post:
      tags:
        - rest                  
      summary: Used to save a Workspace to the repository. The user_id (keycloak user id) will be automatically filled with the current user
      security:
        - bearerAuth: []
      requestBody:
        description: The Workspace to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        400:
          description: The Workspace already exists.
  /workspace/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve a workspace from the repository.
      responses:
        200:
          description: The workspace.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        404:
          description: The workspace was not found.
      tags:
        - rest
    put:
      summary: Update a workspace in the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The workspace to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"
      responses:
        200:
          description: The workspace was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        404:
          description: The workspace was not found.
      tags:
        - rest
    delete:
      summary: Delete a workspace from the repository.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The workspace was deleted.
        404:
          description: The workspace was not found.
      tags:
        - rest
  /workspace/{id}/thumbnail:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Workspace ID of the workspace
    post:
      summary: Sets the thumbnail of the workspace.
      operationId: setthumbnail
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                thumbNail:
                  type: string
                  format: binary
      responses:
        200:
          description: The workspace was updated with the thumbnail.
        404:
          description: The workspace was not found or the thumbnail was not specified         
      tags:
        - workspace
      x-openapi-router-controller: workspaces.controllers.workspace_controller
  /workspace/{id}/gallery:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Workspace ID of the workspace
    post:
      summary: Adds and image to the workspace.
      operationId: addimage
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        200:
          description: The image was added to the workspace.
        404:
          description: The workspace was not found or the image was not specified         
      tags:
        - workspace
      x-openapi-router-controller: workspaces.controllers.workspace_controller
  /workspace/{id}/gallery/{image_id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Workspace ID of the workspace
      - in: path
        name: image_id
        required: true
        schema:
          type: integer
        description: Workspace Image Id to be deleted from the workspace
    delete:
      summary: Delete a Workspace Image from the workspace.
      operationId: delimage
      security:
        - bearerAuth: []
      responses:
        200:
          description: The Workspace Image is successfully deleted from the workspace.
        404:
          description: The workspace was not found.
      tags:
        - workspace
      x-openapi-router-controller: workspaces.controllers.workspace_controller

  /workspaceresource:
    post:
      tags:
        - rest                  
      summary: Used to save a WorkspaceResource to the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The WorkspaceResource to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceResource"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceResource"
        400:
          description: The WorkspaceResource already exists.

  /workspaceresource/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve a WorkspaceResource.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The WorkspaceResource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceResource"
        404:
          description: The WorkspaceResource was not found.
      tags:
        - rest
    put:
      summary: Update the WorkspaceResource.
      security:
        - bearerAuth: []
      requestBody:
        description: The WorkspaceResource to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceResource"
      responses:
        200:
          description: The WorkspaceResource was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceResource"
        404:
          description: The WorkspaceResource was not found.
      tags:
        - rest
    delete:
      summary: Delete a WorkspaceResource.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The WorkspaceResource was deleted.
        404:
          description: The WorkspaceResource was not found.
      tags:
        - rest       

  /workspaceresource/{id}/open:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: WorkspaceResource ID of the WorkspaceResource
    get:
      summary: Used to register a WorkspaceResource open action. The WorkspaceResource timestamp last open will be updated
      security:
        - bearerAuth: []
      operationId: open
      responses:
        200:
          description: The WorkspaceResource was updated.
        404:
          description: The WorkspaceResource was not found.
      tags:
        - workspace_resource
      x-openapi-router-controller: workspaces.controllers.workspace_resource_controller
                
  /osbrepository:
    get:
      tags:
        - rest
      summary: Used to list all available repositories.
      # security:
      #   - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: The page number for starting to collect the result set.
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: q
          schema:
            type: string
            default: None
            example: name__like=%reposi%
          required: false
          description: The search string for filtering of the items to return. Format [fieldname][comparator = , __not= , __like= ][value]     
      responses:
        200:
          description: Return all available repositories
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  gitrepositories:
                    type: array
                    items:
                      $ref: "#/components/schemas/OSBRepository"
  /osbrepository/context:
    parameters:
      - in: query
        name: uri
        schema:
          type: string
        required: true
      - in: query
        name: repository_type
        schema:
          $ref: "#/components/schemas/RepositoryType"
        required: true
    get:
      summary: Used to retrieve the contexts of a repository.
      # security:
      #   - bearerAuth: []
      operationId: workspaces.controllers.osbrepository_controller.get_contexts
      responses:
        200:
          description: The repository.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSBRepository"
        404:
          description: The repository was not found.
      tags:
        - rest
  /osbrepository/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: context
        schema:
          type: string
        description: the context for getting the resources, optional
    get:
      summary: Used to retrieve a repository.
      # security:
      #   - bearerAuth: []
      operationId: workspaces.controllers.osbrepository_controller.get
      responses:
        200:
          description: The repository.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSBRepository"
        404:
          description: The repository was not found.
      tags:
        - rest
  /osbrepositoryresource:
    post:
      tags:
        - rest                  
      summary: Used to save a resource to a context of the osb repository.
      # security:
      #   - bearerAuth: []
      operationId: post
      x-openapi-router-controller: workspaces.controllers.osbrepository_resource_controller
      requestBody:
        description: The RepositoryResource to save.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                osbrepository_id:
                  description: OSB Repository id
                  type: integer
                context_name:
                  description: OSB Repository Context Name
                  type: string
                full_filename:
                  type: string
                  example: folder/file.ext
                  description: folder/file name
                uid:
                  type: string
                  description: unique identifier for the resource in the (external) repository
                  example: Git SHA e.g. dae86e1950b1277e545cee180551750029cfe735
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryResource"
        400:
          description: The RepositoryResource already exists.
  /osbrepositoryresource/{id}:
    parameters:
      - in: path
        name: id
        description: osb repository context resource id
        schema:
          type: integer
        required: true
    delete:
      tags:
        - rest                  
      summary: Delete a resource from a context of the osb repository.
      # security:
      #   - bearerAuth: []
      requestBody:
        description: The OSBRepositoryResource to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepositoryResource"
      responses:
        200:
          description: The OSBRepositoryResource was deleted.
        400:
          description: The OSBRepositoryResource was not found.
  /gitrepository:
    post:
      tags:
        - rest                  
      summary: Used to save a GITRepository to the repository. The user_id (keycloak user id) will be automatically filled with the current user
      # security:
      #   - bearerAuth: []
      requestBody:
        description: The GITRepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GITRepository"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GITRepository"
        400:
          description: The GITRepository already exists.
  /gitrepository/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve a gitrepository from the repository.
      responses:
        200:
          description: The gitrepository.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GITRepository"
        404:
          description: The gitrepository was not found.
      tags:
        - rest
    put:
      summary: Update a gitrepository in the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The gitrepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GITRepository"
      responses:
        200:
          description: The gitrepository was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GITRepository"
        404:
          description: The gitrepository was not found.
      tags:
        - rest
    delete:
      summary: Delete a gitrepository from the repository.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The gitrepository was deleted.
        404:
          description: The gitrepository was not found.
      tags:
        - rest

  /figsharerepository:
    get:
      tags:
        - rest
      summary: Used to list all available figsharerepositories.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: The page number for starting to collect the result set.
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: q
          schema:
            type: string
            default: None
            example: name__like=%reposi%
          required: false
          description: The search string for filtering of the items to return. Format [fieldname][comparator = , __not= , __like= ][value]     
      responses:
        200:
          description: Return all available figsharerepositories
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  figsharerepositories:
                    type: array
                    items:
                      $ref: "#/components/schemas/FigshareRepository"
    post:
      tags:
        - rest                  
      summary: Used to save a FigshareRepository to the repository. The user_id (keycloak user id) will be automatically filled with the current user
      security:
        - bearerAuth: []
      requestBody:
        description: The FigshareRepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FigshareRepository"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FigshareRepository"
        400:
          description: The FigshareRepository already exists.
  /figsharerepository/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve an figsharerepository from the repository.
      responses:
        200:
          description: The figsharerepository.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FigshareRepository"
        404:
          description: The figsharerepository was not found.
      tags:
        - rest
    put:
      summary: Update an figsharerepository in the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The figsharerepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FigshareRepository"
      responses:
        200:
          description: The figsharerepository was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FigshareRepository"
        404:
          description: The figsharerepository was not found.
      tags:
        - rest
    delete:
      summary: Delete an figsharerepository from the repository.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The figsharerepository was deleted.
        404:
          description: The figsharerepository was not found.
      tags:
        - rest     

  /volumestorage:
    get:
      tags:
        - rest
      summary: Used to list all available volumestorages.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: The page number for starting to collect the result set.
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: q
          schema:
            type: string
            default: None
            example: name__like=%storage%
          required: false
          description: The search string for filtering of the items to return. Format [fieldname][comparator = , __not= , __like= ][value]     
      responses:
        200:
          description: Return all available volumestorages
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  volumestorages:
                    type: array
                    items:
                      $ref: "#/components/schemas/VolumeStorage"
    post:
      tags:
        - rest                  
      summary: Used to save a VolumeStorage to the repository. The user_id (keycloak user id) will be automatically filled with the current user
      security:
        - bearerAuth: []      
      requestBody:
        description: The VolumeStorage to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeStorage"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeStorage"
        400:
          description: The VolumeStorage already exists.
  /volumestorage/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve an volumestorage from the repository.
      responses:
        200:
          description: The volumestorage.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeStorage"
        404:
          description: The volumestorage was not found.
      tags:
        - rest
    put:
      summary: Update an volumestorage in the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The volumestorage to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeStorage"
      responses:
        200:
          description: The volumestorage was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeStorage"
        404:
          description: The volumestorage was not found.
      tags:
        - rest
    delete:
      summary: Delete an volumestorage from the repository.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The volumestorage was deleted.
        404:
          description: The volumestorage was not found.
      tags:
        - rest            

components: 
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: cloudharness.auth.AuthClient.decode_token
  schemas:
    Valid:
      type: object
      properties:
        response:
          type: string    
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        number_of_pages:
          type: integer
    PrimaryKey:
      type: integer
      x-primary-key: true
      x-autoincrement: true
    RepositoryType:
      description: |
        Repository type:
          * dandi - DANDI repository
          * figshare - FigShare repository
          * github - Github repository
      type: string
      enum:
        - dandi
        - figshare
        - github
    RepositoryContentType:
      description: >
        Repository Content type:
          * experimental - Experimental data
          * modeling - Modeling
      type: string
      enum:
        - experimental
        - modeling
    ResourceType:
      default: g
      description: |
        Resource type:
         * e - Experimental
         * m - Model
         * g - Generic
         * u - Unknown (to be defined)
      type: string
      enum:
        - e
        - m
        - g
        - u
      example: g
    ResourceStatus:
        description: |
          Resource status:
           * a - Available
           * e - Error, not available
           * p - Pending
        type: string
        enum:
          - a
          - e
          - p
        default: p
        example: p
    ImageType:
      type: string
    Workspace:
      description: Workspace item
      type: object
      x-tablename: workspace
      properties:
        id:
          description: Unique identifier of the Workspace
          $ref: "#/components/schemas/PrimaryKey"
        name:
          description: Workspace name.
          type: string
          example: Workspace One
        description:
          description: Workspace description.
          type: string
          example: Workspace One description
        timestamp_created:
          description: Date/time the Workspace is created
          type: string
          format: 'date-time'
          example: 2019-11-23T01:23:45Z
        timestamp_updated:
          description: Date/time the Workspace is last updated
          type: string
          format: 'date-time'
          example: 2019-11-23T01:23:45Z
        tags:
          description: Workspace tags
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/WorkspaceTag"
        last_opened_resource_id:
          description: The workspace resource id the workspace is opened last with
          type: integer
        thumbnail:
          description: Workspace type icon.
          $ref: "#/components/schemas/ImageType"
        gallery:
          description: Gallery with images of the workspace
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/WorkspaceImage"
        user_id:
          description: Workspace keycloak user id, will be automatically be set to the logged in user
          type: string
        publicable:
          description: Is the workspace available for non collaborators? Default false
          type: boolean
          default: false
          example: false
        license:
          description: Workspace license
          type: string
          example: license
        collaborators:
          description: Collaborators who work on the workspace
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceCollaborator"
        resources:
          description: Resources of the workspace
          type: array
          items:
              $ref: "#/components/schemas/WorkspaceResource"
        storage:
          description: Storage of the workspace
          $ref: "#/components/schemas/VolumeStorage"
      required:
        - name
        - description
    WorkspaceCollaborator:
      description: Workspace Collaborator of a workspace
      type: object
      x-tablename: workspacecollaborator
      properties:
        id:
          description: Unique identifier of the WorkspaceCollaborator
          $ref: "#/components/schemas/PrimaryKey"
        user_id:
          description: Workspace Collaborator keycloak user id
          type: string
      required:
        - user_id    
    WorkspaceImage:
      description: Workspace images of a workspace
      type: object
      x-tablename: workspaceimage
      properties:
        id:
          description: Unique identifier of the WorkspaceImage
          $ref: "#/components/schemas/PrimaryKey"
        image:
          description: Workspace Image
          $ref: "#/components/schemas/ImageType"
      required:
        - image    
    WorkspaceTag:
      description: Workspace tags linking to workspaces
      type: object
      x-tablename: WorkspaceTag
      properties:
        id:
          description: Unique identifier of the WorkspaceTag
          $ref: "#/components/schemas/PrimaryKey"
        tag:
          description: WorkspaceTag tag
          type: string
          example: Workspace Tag One
      required:
        - tag
    WorkspaceResource:
      description: Workspace Resource item of a Workspace
      type: object
      x-tablename: workspaceresource
      properties:
        id:
          description: Unique identifier of the WorkspaceResource
          $ref: "#/components/schemas/PrimaryKey"
        name:
          description: WorkspaceResource name
          type: string
          example: Workspace Resource One
        location:
          description: WorkspaceResource location original location of the resource
          type: string
          example: https://github.com/OpenSourceBrain/NWBShowcase/raw/master/NWB/time_series_data.nwb
        folder:
          description: WorkspaceResource folder where the resource will stored in the pvc
          type: string
          example: Workspace Resource One
        status:
          description: WorkspaceResource status is the resource
          $ref: "#/components/schemas/ResourceStatus"
        timestamp_created:
          description: Date/time of creation of the WorkspaceResource
          type: string
          format: 'date-time'
          example: 2019-11-23T01:23:45Z
        timestamp_updated:
          description: Date/time of last updating of the WorkspaceResource
          type: string
          format: 'date-time'
          example: 2019-11-23T01:23:45Z
        timestamp_last_opened:
          description: Date/time of last opening of the WorkspaceResource
          type: string
          format: 'date-time'
          example: 2019-11-23T01:23:45Z  
        resource_type:
          description: WorkspaceResource type
          $ref: "#/components/schemas/ResourceType"
        workspace_id:
          description: workspace_id
          type: integer
          x-foreign-key: workspace.id
      required:
        - name
        - resource_type
        - location
    VolumeStorage:
      description: Volume which can be connected to a workspace
      type: object
      x-tablename: volumestorage
      properties:
        id:
          description: Unique identifier of the StorageVolume
          $ref: "#/components/schemas/PrimaryKey"
        name:
          description: StorageVolume name
          type: string
          example: Storage Volume One
      required:
        - name
    RepositoryBase:
      description: Repository Base model
      type: object
      properties:
        id:
          description: Unique identifier of the repository
          $ref: "#/components/schemas/PrimaryKey"        
        name:
          description: Repository name.
          type: string
          example: Repo One
        description:
          description: Repository description.
          type: string
          example: Repo One description
        repository_type:
          description: Repository type
          $ref: "#/components/schemas/RepositoryType"
        repository_content_types:
          description: Comma separated set of Repository Content Types
          type: string
          example: "experimental,modeling"
        auto_sync:
          description: Auto sync of the resources
          type: boolean
          default: true
          example: true
        uri:
          description: URI of the repository
          type: string
          example: https://github.com/OpenSourceBrain/OSBv2
        user_id:
          description: Repository keycloak user id, will be automatically be set to the logged in user
          type: string
        used_contexts:
          description: List of contexts with used/referenced resources in this repository
          type: array
          items:
            $ref: "#/components/schemas/OSBRepositoryContext"
      required:
        - name
        - description
        - repository_type
        - repository_content_types
        - auto_sync
        - uri
    OSBRepository:
      allOf:
        - $ref: "#/components/schemas/RepositoryBase"
        - description: Repository
          type: object
          properties:
            context_resources:
              description: List of repository resources
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/RepositoryResourceNode"
            all_contexts:
              description: List of repository contexts
              type: array
              items:
                  type: string
            description:
              description: Repository description
              type: string
    OSBRepositoryContext:
      description: OSBRepository context
      type: object
      x-tablename: osbrepositorycontext
      properties:
        id:
          description: Unique identifier of the OSBRepositoryContext
          $ref: "#/components/schemas/PrimaryKey"        
        name:
          description: Name of the repository context
          type: string
        resources:
          description: List of used/referenced resources in this context
          type: array
          items:
            $ref: "#/components/schemas/OSBRepositoryResource"
    OSBRepositoryResource:
      allOf:
        - $ref: "#/components/schemas/RepositoryResource"
        - description: OSB Repository Resource
          type: object
          x-tablename: osbrepositoryresource
          properties:
            id:
              description: Unique identifier of the OSBRepositoryResource
              $ref: "#/components/schemas/PrimaryKey"
    GITRepository:
      allOf:
        - $ref: "#/components/schemas/RepositoryBase"
        - description: GIT repository
          type: object
          x-tablename: gitrepository
          properties:
            default_context:
              description: The default branch to show for this repository
              type: string
              example: develop
          required:
            - default_context
    FigshareRepository:
      allOf:
        - $ref: "#/components/schemas/RepositoryBase"
        - description: Figshare repository
          type: object
          x-tablename: figsharerepository
          properties:
            url:
              description: URL of the figshare repository
              type: string
              example: https://figshare.com/articles/Screenshot_of_OSB/6034208
          required:
            - url
    RepositoryResource:
      description: Resource (files/folders) of a OSBRepository
      type: object
      properties:
        name:
          type: string
          example: folder/file.ext
          description: folder/file name
        uid:
          type: string
          description: unique identifier for the resource in the (external) repository
          example: Git SHA e.g. dae86e1950b1277e545cee180551750029cfe735
    RepositoryResourceNode:
      description: Tree node (files/folders) of a Repository tree
      type: object
      properties:
        resource:
          $ref: "#/components/schemas/RepositoryResource"
        timestamp_modified:
          description: Date/time the ReposityResource is last modified
          type: string
          format: 'date-time'
          example: 2019-11-23T01:23:45Z
        children:
          type: array
          items:
            $ref: "#/components/schemas/RepositoryResourceNode"
      example:
        name: /
        timestamp_modified: 2019-11-23T01:23:45Z
        children:
          - name: README.md
            timestamp_modified: 2019-11-23T01:23:45Z
          - name: applications
            timestamp_modified: 2019-11-23T01:23:45Z
            children:
              - name: accounts
                timestamp_modified: 2019-11-23T01:23:45Z
                children:
                  - name: Dockerfile
                    timestamp_modified: 2019-11-23T01:23:45Z
