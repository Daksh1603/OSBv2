# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workspaces.models.base_model_ import Model
from workspaces.models.osb_repository_resource import OSBRepositoryResource
from workspaces import util

from workspaces.models.osb_repository_resource import OSBRepositoryResource  # noqa: E501

class OSBRepositoryContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, resources=None):  # noqa: E501
        """OSBRepositoryContext - a model defined in OpenAPI

        :param id: The id of this OSBRepositoryContext.  # noqa: E501
        :type id: int
        :param name: The name of this OSBRepositoryContext.  # noqa: E501
        :type name: str
        :param resources: The resources of this OSBRepositoryContext.  # noqa: E501
        :type resources: List[OSBRepositoryResource]
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'resources': List[OSBRepositoryResource]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'resources': 'resources'
        }

        self._id = id
        self._name = name
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'OSBRepositoryContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OSBRepositoryContext of this OSBRepositoryContext.  # noqa: E501
        :rtype: OSBRepositoryContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OSBRepositoryContext.


        :return: The id of this OSBRepositoryContext.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSBRepositoryContext.


        :param id: The id of this OSBRepositoryContext.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OSBRepositoryContext.

        Name of the repository context  # noqa: E501

        :return: The name of this OSBRepositoryContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSBRepositoryContext.

        Name of the repository context  # noqa: E501

        :param name: The name of this OSBRepositoryContext.
        :type name: str
        """

        self._name = name

    @property
    def resources(self):
        """Gets the resources of this OSBRepositoryContext.

        List of used/referenced resources in this context  # noqa: E501

        :return: The resources of this OSBRepositoryContext.
        :rtype: List[OSBRepositoryResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this OSBRepositoryContext.

        List of used/referenced resources in this context  # noqa: E501

        :param resources: The resources of this OSBRepositoryContext.
        :type resources: List[OSBRepositoryResource]
        """

        self._resources = resources
