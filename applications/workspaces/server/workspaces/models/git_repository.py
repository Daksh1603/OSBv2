# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workspaces.models.base_model_ import Model
from workspaces.models.git_repository_all_of import GITRepositoryAllOf
from workspaces.models.repository import Repository
from workspaces.models.repository_content_type import RepositoryContentType
from workspaces.models.repository_type import RepositoryType
from workspaces import util

from workspaces.models.git_repository_all_of import GITRepositoryAllOf  # noqa: E501
from workspaces.models.repository import Repository  # noqa: E501
from workspaces.models.repository_content_type import RepositoryContentType  # noqa: E501
from workspaces.models.repository_type import RepositoryType  # noqa: E501

class GITRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, default_branch=None, repository_type=None, repository_content_type=None, auto_sync=True, url=None):  # noqa: E501
        """GITRepository - a model defined in OpenAPI

        :param id: The id of this GITRepository.  # noqa: E501
        :type id: int
        :param name: The name of this GITRepository.  # noqa: E501
        :type name: str
        :param description: The description of this GITRepository.  # noqa: E501
        :type description: str
        :param default_branch: The default_branch of this GITRepository.  # noqa: E501
        :type default_branch: str
        :param repository_type: The repository_type of this GITRepository.  # noqa: E501
        :type repository_type: RepositoryType
        :param repository_content_type: The repository_content_type of this GITRepository.  # noqa: E501
        :type repository_content_type: RepositoryContentType
        :param auto_sync: The auto_sync of this GITRepository.  # noqa: E501
        :type auto_sync: bool
        :param url: The url of this GITRepository.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'description': str,
            'default_branch': str,
            'repository_type': RepositoryType,
            'repository_content_type': RepositoryContentType,
            'auto_sync': bool,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'default_branch': 'default_branch',
            'repository_type': 'repository_type',
            'repository_content_type': 'repository_content_type',
            'auto_sync': 'auto_sync',
            'url': 'url'
        }

        self._id = id
        self._name = name
        self._description = description
        self._default_branch = default_branch
        self._repository_type = repository_type
        self._repository_content_type = repository_content_type
        self._auto_sync = auto_sync
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'GITRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GITRepository of this GITRepository.  # noqa: E501
        :rtype: GITRepository
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GITRepository.


        :return: The id of this GITRepository.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GITRepository.


        :param id: The id of this GITRepository.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GITRepository.

        Repository name.  # noqa: E501

        :return: The name of this GITRepository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GITRepository.

        Repository name.  # noqa: E501

        :param name: The name of this GITRepository.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GITRepository.

        Repository description.  # noqa: E501

        :return: The description of this GITRepository.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GITRepository.

        Repository description.  # noqa: E501

        :param description: The description of this GITRepository.
        :type description: str
        """

        self._description = description

    @property
    def default_branch(self):
        """Gets the default_branch of this GITRepository.

        The default branch to show for this repository  # noqa: E501

        :return: The default_branch of this GITRepository.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this GITRepository.

        The default branch to show for this repository  # noqa: E501

        :param default_branch: The default_branch of this GITRepository.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def repository_type(self):
        """Gets the repository_type of this GITRepository.


        :return: The repository_type of this GITRepository.
        :rtype: RepositoryType
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this GITRepository.


        :param repository_type: The repository_type of this GITRepository.
        :type repository_type: RepositoryType
        """

        self._repository_type = repository_type

    @property
    def repository_content_type(self):
        """Gets the repository_content_type of this GITRepository.


        :return: The repository_content_type of this GITRepository.
        :rtype: RepositoryContentType
        """
        return self._repository_content_type

    @repository_content_type.setter
    def repository_content_type(self, repository_content_type):
        """Sets the repository_content_type of this GITRepository.


        :param repository_content_type: The repository_content_type of this GITRepository.
        :type repository_content_type: RepositoryContentType
        """

        self._repository_content_type = repository_content_type

    @property
    def auto_sync(self):
        """Gets the auto_sync of this GITRepository.

        Auto sync of the resources  # noqa: E501

        :return: The auto_sync of this GITRepository.
        :rtype: bool
        """
        return self._auto_sync

    @auto_sync.setter
    def auto_sync(self, auto_sync):
        """Sets the auto_sync of this GITRepository.

        Auto sync of the resources  # noqa: E501

        :param auto_sync: The auto_sync of this GITRepository.
        :type auto_sync: bool
        """

        self._auto_sync = auto_sync

    @property
    def url(self):
        """Gets the url of this GITRepository.

        URL of the git repository  # noqa: E501

        :return: The url of this GITRepository.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GITRepository.

        URL of the git repository  # noqa: E501

        :param url: The url of this GITRepository.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url
