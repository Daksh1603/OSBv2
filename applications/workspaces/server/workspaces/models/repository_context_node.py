# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workspaces.models.base_model_ import Model
from workspaces import util


class RepositoryContextNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, context_node_type=None, children=None):  # noqa: E501
        """RepositoryContextNode - a model defined in OpenAPI

        :param name: The name of this RepositoryContextNode.  # noqa: E501
        :type name: str
        :param context_node_type: The context_node_type of this RepositoryContextNode.  # noqa: E501
        :type context_node_type: str
        :param children: The children of this RepositoryContextNode.  # noqa: E501
        :type children: List[RepositoryContextNode]
        """
        self.openapi_types = {
            'name': str,
            'context_node_type': str,
            'children': List[RepositoryContextNode]
        }

        self.attribute_map = {
            'name': 'name',
            'context_node_type': 'context_node_type',
            'children': 'children'
        }

        self._name = name
        self._context_node_type = context_node_type
        self._children = children

    @classmethod
    def from_dict(cls, dikt) -> 'RepositoryContextNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RepositoryContextNode of this RepositoryContextNode.  # noqa: E501
        :rtype: RepositoryContextNode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RepositoryContextNode.

        folder/file name  # noqa: E501

        :return: The name of this RepositoryContextNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryContextNode.

        folder/file name  # noqa: E501

        :param name: The name of this RepositoryContextNode.
        :type name: str
        """

        self._name = name

    @property
    def context_node_type(self):
        """Gets the context_node_type of this RepositoryContextNode.

        Repository Context Node type:   * p - Plain file   * f - Folder   # noqa: E501

        :return: The context_node_type of this RepositoryContextNode.
        :rtype: str
        """
        return self._context_node_type

    @context_node_type.setter
    def context_node_type(self, context_node_type):
        """Sets the context_node_type of this RepositoryContextNode.

        Repository Context Node type:   * p - Plain file   * f - Folder   # noqa: E501

        :param context_node_type: The context_node_type of this RepositoryContextNode.
        :type context_node_type: str
        """
        allowed_values = ["p", "f"]  # noqa: E501
        if context_node_type not in allowed_values:
            raise ValueError(
                "Invalid value for `context_node_type` ({0}), must be one of {1}"
                .format(context_node_type, allowed_values)
            )

        self._context_node_type = context_node_type

    @property
    def children(self):
        """Gets the children of this RepositoryContextNode.


        :return: The children of this RepositoryContextNode.
        :rtype: List[RepositoryContextNode]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this RepositoryContextNode.


        :param children: The children of this RepositoryContextNode.
        :type children: List[RepositoryContextNode]
        """

        self._children = children
