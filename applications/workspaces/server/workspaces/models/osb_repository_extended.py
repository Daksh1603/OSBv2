# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workspaces.models.base_model_ import Model
from workspaces.models.osb_repository_base import OSBRepositoryBase
from workspaces.models.osb_repository_extended_all_of import OSBRepositoryExtendedAllOf
from workspaces.models.repository_content_type import RepositoryContentType
from workspaces.models.repository_resource_node import RepositoryResourceNode
from workspaces.models.repository_type import RepositoryType
from workspaces.models.user import User
from workspaces import util

from workspaces.models.osb_repository_base import OSBRepositoryBase  # noqa: E501
from workspaces.models.osb_repository_extended_all_of import OSBRepositoryExtendedAllOf  # noqa: E501
from workspaces.models.repository_content_type import RepositoryContentType  # noqa: E501
from workspaces.models.repository_resource_node import RepositoryResourceNode  # noqa: E501
from workspaces.models.repository_type import RepositoryType  # noqa: E501
from workspaces.models.user import User  # noqa: E501

class OSBRepositoryExtended(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, summary=None, repository_type=None, content_types=None, auto_sync=True, uri=None, default_context=None, user_id=None, context_resources=None, contexts=None, user=None, content_types_list=None, description=None, timestamp_modified=None):  # noqa: E501
        """OSBRepositoryExtended - a model defined in OpenAPI

        :param id: The id of this OSBRepositoryExtended.  # noqa: E501
        :type id: int
        :param name: The name of this OSBRepositoryExtended.  # noqa: E501
        :type name: str
        :param summary: The summary of this OSBRepositoryExtended.  # noqa: E501
        :type summary: str
        :param repository_type: The repository_type of this OSBRepositoryExtended.  # noqa: E501
        :type repository_type: RepositoryType
        :param content_types: The content_types of this OSBRepositoryExtended.  # noqa: E501
        :type content_types: str
        :param auto_sync: The auto_sync of this OSBRepositoryExtended.  # noqa: E501
        :type auto_sync: bool
        :param uri: The uri of this OSBRepositoryExtended.  # noqa: E501
        :type uri: str
        :param default_context: The default_context of this OSBRepositoryExtended.  # noqa: E501
        :type default_context: str
        :param user_id: The user_id of this OSBRepositoryExtended.  # noqa: E501
        :type user_id: str
        :param context_resources: The context_resources of this OSBRepositoryExtended.  # noqa: E501
        :type context_resources: List[RepositoryResourceNode]
        :param contexts: The contexts of this OSBRepositoryExtended.  # noqa: E501
        :type contexts: List[str]
        :param user: The user of this OSBRepositoryExtended.  # noqa: E501
        :type user: User
        :param content_types_list: The content_types_list of this OSBRepositoryExtended.  # noqa: E501
        :type content_types_list: List[RepositoryContentType]
        :param description: The description of this OSBRepositoryExtended.  # noqa: E501
        :type description: str
        :param timestamp_modified: The timestamp_modified of this OSBRepositoryExtended.  # noqa: E501
        :type timestamp_modified: datetime
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'summary': str,
            'repository_type': RepositoryType,
            'content_types': str,
            'auto_sync': bool,
            'uri': str,
            'default_context': str,
            'user_id': str,
            'context_resources': List[RepositoryResourceNode],
            'contexts': List[str],
            'user': User,
            'content_types_list': List[RepositoryContentType],
            'description': str,
            'timestamp_modified': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'summary': 'summary',
            'repository_type': 'repository_type',
            'content_types': 'content_types',
            'auto_sync': 'auto_sync',
            'uri': 'uri',
            'default_context': 'default_context',
            'user_id': 'user_id',
            'context_resources': 'context_resources',
            'contexts': 'contexts',
            'user': 'user',
            'content_types_list': 'content_types_list',
            'description': 'description',
            'timestamp_modified': 'timestamp_modified'
        }

        self._id = id
        self._name = name
        self._summary = summary
        self._repository_type = repository_type
        self._content_types = content_types
        self._auto_sync = auto_sync
        self._uri = uri
        self._default_context = default_context
        self._user_id = user_id
        self._context_resources = context_resources
        self._contexts = contexts
        self._user = user
        self._content_types_list = content_types_list
        self._description = description
        self._timestamp_modified = timestamp_modified

    @classmethod
    def from_dict(cls, dikt) -> 'OSBRepositoryExtended':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OSBRepositoryExtended of this OSBRepositoryExtended.  # noqa: E501
        :rtype: OSBRepositoryExtended
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OSBRepositoryExtended.


        :return: The id of this OSBRepositoryExtended.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSBRepositoryExtended.


        :param id: The id of this OSBRepositoryExtended.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OSBRepositoryExtended.

        Repository name.  # noqa: E501

        :return: The name of this OSBRepositoryExtended.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSBRepositoryExtended.

        Repository name.  # noqa: E501

        :param name: The name of this OSBRepositoryExtended.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def summary(self):
        """Gets the summary of this OSBRepositoryExtended.

        Summary describing the OSB Repository  # noqa: E501

        :return: The summary of this OSBRepositoryExtended.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this OSBRepositoryExtended.

        Summary describing the OSB Repository  # noqa: E501

        :param summary: The summary of this OSBRepositoryExtended.
        :type summary: str
        """

        self._summary = summary

    @property
    def repository_type(self):
        """Gets the repository_type of this OSBRepositoryExtended.


        :return: The repository_type of this OSBRepositoryExtended.
        :rtype: RepositoryType
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this OSBRepositoryExtended.


        :param repository_type: The repository_type of this OSBRepositoryExtended.
        :type repository_type: RepositoryType
        """
        if repository_type is None:
            raise ValueError("Invalid value for `repository_type`, must not be `None`")  # noqa: E501

        self._repository_type = repository_type

    @property
    def content_types(self):
        """Gets the content_types of this OSBRepositoryExtended.

        List of Repository Content Types  # noqa: E501

        :return: The content_types of this OSBRepositoryExtended.
        :rtype: str
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this OSBRepositoryExtended.

        List of Repository Content Types  # noqa: E501

        :param content_types: The content_types of this OSBRepositoryExtended.
        :type content_types: str
        """
        if content_types is None:
            raise ValueError("Invalid value for `content_types`, must not be `None`")  # noqa: E501

        self._content_types = content_types

    @property
    def auto_sync(self):
        """Gets the auto_sync of this OSBRepositoryExtended.

        Auto sync of the resources  # noqa: E501

        :return: The auto_sync of this OSBRepositoryExtended.
        :rtype: bool
        """
        return self._auto_sync

    @auto_sync.setter
    def auto_sync(self, auto_sync):
        """Sets the auto_sync of this OSBRepositoryExtended.

        Auto sync of the resources  # noqa: E501

        :param auto_sync: The auto_sync of this OSBRepositoryExtended.
        :type auto_sync: bool
        """
        if auto_sync is None:
            raise ValueError("Invalid value for `auto_sync`, must not be `None`")  # noqa: E501

        self._auto_sync = auto_sync

    @property
    def uri(self):
        """Gets the uri of this OSBRepositoryExtended.

        URI of the repository  # noqa: E501

        :return: The uri of this OSBRepositoryExtended.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this OSBRepositoryExtended.

        URI of the repository  # noqa: E501

        :param uri: The uri of this OSBRepositoryExtended.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def default_context(self):
        """Gets the default_context of this OSBRepositoryExtended.

        The default branch to show for this repository  # noqa: E501

        :return: The default_context of this OSBRepositoryExtended.
        :rtype: str
        """
        return self._default_context

    @default_context.setter
    def default_context(self, default_context):
        """Sets the default_context of this OSBRepositoryExtended.

        The default branch to show for this repository  # noqa: E501

        :param default_context: The default_context of this OSBRepositoryExtended.
        :type default_context: str
        """

        self._default_context = default_context

    @property
    def user_id(self):
        """Gets the user_id of this OSBRepositoryExtended.

        OSBRepository keycloak user id, will be automatically be set to the logged in user  # noqa: E501

        :return: The user_id of this OSBRepositoryExtended.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OSBRepositoryExtended.

        OSBRepository keycloak user id, will be automatically be set to the logged in user  # noqa: E501

        :param user_id: The user_id of this OSBRepositoryExtended.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def context_resources(self):
        """Gets the context_resources of this OSBRepositoryExtended.


        :return: The context_resources of this OSBRepositoryExtended.
        :rtype: List[RepositoryResourceNode]
        """
        return self._context_resources

    @context_resources.setter
    def context_resources(self, context_resources):
        """Sets the context_resources of this OSBRepositoryExtended.


        :param context_resources: The context_resources of this OSBRepositoryExtended.
        :type context_resources: List[RepositoryResourceNode]
        """

        self._context_resources = context_resources

    @property
    def contexts(self):
        """Gets the contexts of this OSBRepositoryExtended.


        :return: The contexts of this OSBRepositoryExtended.
        :rtype: List[str]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this OSBRepositoryExtended.


        :param contexts: The contexts of this OSBRepositoryExtended.
        :type contexts: List[str]
        """

        self._contexts = contexts

    @property
    def user(self):
        """Gets the user of this OSBRepositoryExtended.


        :return: The user of this OSBRepositoryExtended.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OSBRepositoryExtended.


        :param user: The user of this OSBRepositoryExtended.
        :type user: User
        """

        self._user = user

    @property
    def content_types_list(self):
        """Gets the content_types_list of this OSBRepositoryExtended.


        :return: The content_types_list of this OSBRepositoryExtended.
        :rtype: List[RepositoryContentType]
        """
        return self._content_types_list

    @content_types_list.setter
    def content_types_list(self, content_types_list):
        """Sets the content_types_list of this OSBRepositoryExtended.


        :param content_types_list: The content_types_list of this OSBRepositoryExtended.
        :type content_types_list: List[RepositoryContentType]
        """

        self._content_types_list = content_types_list

    @property
    def description(self):
        """Gets the description of this OSBRepositoryExtended.

        Repository description  # noqa: E501

        :return: The description of this OSBRepositoryExtended.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OSBRepositoryExtended.

        Repository description  # noqa: E501

        :param description: The description of this OSBRepositoryExtended.
        :type description: str
        """

        self._description = description

    @property
    def timestamp_modified(self):
        """Gets the timestamp_modified of this OSBRepositoryExtended.

        Date/time the OSBReposity is last modified  # noqa: E501

        :return: The timestamp_modified of this OSBRepositoryExtended.
        :rtype: datetime
        """
        return self._timestamp_modified

    @timestamp_modified.setter
    def timestamp_modified(self, timestamp_modified):
        """Sets the timestamp_modified of this OSBRepositoryExtended.

        Date/time the OSBReposity is last modified  # noqa: E501

        :param timestamp_modified: The timestamp_modified of this OSBRepositoryExtended.
        :type timestamp_modified: datetime
        """

        self._timestamp_modified = timestamp_modified
