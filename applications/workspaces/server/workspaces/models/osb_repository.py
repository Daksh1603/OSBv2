# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workspaces.models.base_model_ import Model
from workspaces.models.volume_storage import VolumeStorage
from workspaces.models.workspace_resource import WorkspaceResource
from workspaces import util

from workspaces.models.volume_storage import VolumeStorage  # noqa: E501
from workspaces.models.workspace_resource import WorkspaceResource  # noqa: E501

class OSBRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, uuid=None, name=None, storage=None, resources=None):  # noqa: E501
        """OSBRepository - a model defined in OpenAPI

        :param id: The id of this OSBRepository.  # noqa: E501
        :type id: int
        :param uuid: The uuid of this OSBRepository.  # noqa: E501
        :type uuid: str
        :param name: The name of this OSBRepository.  # noqa: E501
        :type name: str
        :param storage: The storage of this OSBRepository.  # noqa: E501
        :type storage: VolumeStorage
        :param resources: The resources of this OSBRepository.  # noqa: E501
        :type resources: List[WorkspaceResource]
        """
        self.openapi_types = {
            'id': int,
            'uuid': str,
            'name': str,
            'storage': VolumeStorage,
            'resources': List[WorkspaceResource]
        }

        self.attribute_map = {
            'id': 'id',
            'uuid': 'uuid',
            'name': 'name',
            'storage': 'storage',
            'resources': 'resources'
        }

        self._id = id
        self._uuid = uuid
        self._name = name
        self._storage = storage
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'OSBRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OSBRepository of this OSBRepository.  # noqa: E501
        :rtype: OSBRepository
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OSBRepository.


        :return: The id of this OSBRepository.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSBRepository.


        :param id: The id of this OSBRepository.
        :type id: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this OSBRepository.

        Universally unique identifier of the OSB repository  # noqa: E501

        :return: The uuid of this OSBRepository.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this OSBRepository.

        Universally unique identifier of the OSB repository  # noqa: E501

        :param uuid: The uuid of this OSBRepository.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this OSBRepository.

        OSB repository name  # noqa: E501

        :return: The name of this OSBRepository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSBRepository.

        OSB repository name  # noqa: E501

        :param name: The name of this OSBRepository.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def storage(self):
        """Gets the storage of this OSBRepository.


        :return: The storage of this OSBRepository.
        :rtype: VolumeStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this OSBRepository.


        :param storage: The storage of this OSBRepository.
        :type storage: VolumeStorage
        """
        if storage is None:
            raise ValueError("Invalid value for `storage`, must not be `None`")  # noqa: E501

        self._storage = storage

    @property
    def resources(self):
        """Gets the resources of this OSBRepository.


        :return: The resources of this OSBRepository.
        :rtype: List[WorkspaceResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this OSBRepository.


        :param resources: The resources of this OSBRepository.
        :type resources: List[WorkspaceResource]
        """

        self._resources = resources
