# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workspaces.models.base_model_ import Model
from workspaces.models.resource_status import ResourceStatus
from workspaces.models.resource_type import ResourceType
from workspaces import util

from workspaces.models.resource_status import ResourceStatus  # noqa: E501
from workspaces.models.resource_type import ResourceType  # noqa: E501

class WorkspaceResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, location=None, folder=None, status=None, timestamp_created=None, timestamp_updated=None, timestamp_last_opened=None, resource_type=None, hash=None, workspace_id=None, osbrepository_id=None):  # noqa: E501
        """WorkspaceResource - a model defined in OpenAPI

        :param id: The id of this WorkspaceResource.  # noqa: E501
        :type id: int
        :param name: The name of this WorkspaceResource.  # noqa: E501
        :type name: str
        :param location: The location of this WorkspaceResource.  # noqa: E501
        :type location: str
        :param folder: The folder of this WorkspaceResource.  # noqa: E501
        :type folder: str
        :param status: The status of this WorkspaceResource.  # noqa: E501
        :type status: ResourceStatus
        :param timestamp_created: The timestamp_created of this WorkspaceResource.  # noqa: E501
        :type timestamp_created: datetime
        :param timestamp_updated: The timestamp_updated of this WorkspaceResource.  # noqa: E501
        :type timestamp_updated: datetime
        :param timestamp_last_opened: The timestamp_last_opened of this WorkspaceResource.  # noqa: E501
        :type timestamp_last_opened: datetime
        :param resource_type: The resource_type of this WorkspaceResource.  # noqa: E501
        :type resource_type: ResourceType
        :param hash: The hash of this WorkspaceResource.  # noqa: E501
        :type hash: str
        :param workspace_id: The workspace_id of this WorkspaceResource.  # noqa: E501
        :type workspace_id: int
        :param osbrepository_id: The osbrepository_id of this WorkspaceResource.  # noqa: E501
        :type osbrepository_id: int
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'location': str,
            'folder': str,
            'status': ResourceStatus,
            'timestamp_created': datetime,
            'timestamp_updated': datetime,
            'timestamp_last_opened': datetime,
            'resource_type': ResourceType,
            'hash': str,
            'workspace_id': int,
            'osbrepository_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'location': 'location',
            'folder': 'folder',
            'status': 'status',
            'timestamp_created': 'timestamp_created',
            'timestamp_updated': 'timestamp_updated',
            'timestamp_last_opened': 'timestamp_last_opened',
            'resource_type': 'resource_type',
            'hash': 'hash',
            'workspace_id': 'workspace_id',
            'osbrepository_id': 'osbrepository_id'
        }

        self._id = id
        self._name = name
        self._location = location
        self._folder = folder
        self._status = status
        self._timestamp_created = timestamp_created
        self._timestamp_updated = timestamp_updated
        self._timestamp_last_opened = timestamp_last_opened
        self._resource_type = resource_type
        self._hash = hash
        self._workspace_id = workspace_id
        self._osbrepository_id = osbrepository_id

    @classmethod
    def from_dict(cls, dikt) -> 'WorkspaceResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorkspaceResource of this WorkspaceResource.  # noqa: E501
        :rtype: WorkspaceResource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this WorkspaceResource.


        :return: The id of this WorkspaceResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkspaceResource.


        :param id: The id of this WorkspaceResource.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WorkspaceResource.

        WorkspaceResource name  # noqa: E501

        :return: The name of this WorkspaceResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkspaceResource.

        WorkspaceResource name  # noqa: E501

        :param name: The name of this WorkspaceResource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this WorkspaceResource.

        WorkspaceResource location original location of the resource  # noqa: E501

        :return: The location of this WorkspaceResource.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this WorkspaceResource.

        WorkspaceResource location original location of the resource  # noqa: E501

        :param location: The location of this WorkspaceResource.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def folder(self):
        """Gets the folder of this WorkspaceResource.

        WorkspaceResource folder where the resource will stored in the pvc  # noqa: E501

        :return: The folder of this WorkspaceResource.
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this WorkspaceResource.

        WorkspaceResource folder where the resource will stored in the pvc  # noqa: E501

        :param folder: The folder of this WorkspaceResource.
        :type folder: str
        """

        self._folder = folder

    @property
    def status(self):
        """Gets the status of this WorkspaceResource.


        :return: The status of this WorkspaceResource.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkspaceResource.


        :param status: The status of this WorkspaceResource.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def timestamp_created(self):
        """Gets the timestamp_created of this WorkspaceResource.

        Date/time of creation of the WorkspaceResource  # noqa: E501

        :return: The timestamp_created of this WorkspaceResource.
        :rtype: datetime
        """
        return self._timestamp_created

    @timestamp_created.setter
    def timestamp_created(self, timestamp_created):
        """Sets the timestamp_created of this WorkspaceResource.

        Date/time of creation of the WorkspaceResource  # noqa: E501

        :param timestamp_created: The timestamp_created of this WorkspaceResource.
        :type timestamp_created: datetime
        """

        self._timestamp_created = timestamp_created

    @property
    def timestamp_updated(self):
        """Gets the timestamp_updated of this WorkspaceResource.

        Date/time of last updating of the WorkspaceResource  # noqa: E501

        :return: The timestamp_updated of this WorkspaceResource.
        :rtype: datetime
        """
        return self._timestamp_updated

    @timestamp_updated.setter
    def timestamp_updated(self, timestamp_updated):
        """Sets the timestamp_updated of this WorkspaceResource.

        Date/time of last updating of the WorkspaceResource  # noqa: E501

        :param timestamp_updated: The timestamp_updated of this WorkspaceResource.
        :type timestamp_updated: datetime
        """

        self._timestamp_updated = timestamp_updated

    @property
    def timestamp_last_opened(self):
        """Gets the timestamp_last_opened of this WorkspaceResource.

        Date/time of last opening of the WorkspaceResource  # noqa: E501

        :return: The timestamp_last_opened of this WorkspaceResource.
        :rtype: datetime
        """
        return self._timestamp_last_opened

    @timestamp_last_opened.setter
    def timestamp_last_opened(self, timestamp_last_opened):
        """Sets the timestamp_last_opened of this WorkspaceResource.

        Date/time of last opening of the WorkspaceResource  # noqa: E501

        :param timestamp_last_opened: The timestamp_last_opened of this WorkspaceResource.
        :type timestamp_last_opened: datetime
        """

        self._timestamp_last_opened = timestamp_last_opened

    @property
    def resource_type(self):
        """Gets the resource_type of this WorkspaceResource.


        :return: The resource_type of this WorkspaceResource.
        :rtype: ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this WorkspaceResource.


        :param resource_type: The resource_type of this WorkspaceResource.
        :type resource_type: ResourceType
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def hash(self):
        """Gets the hash of this WorkspaceResource.

        unique hash of this version of the resource  # noqa: E501

        :return: The hash of this WorkspaceResource.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this WorkspaceResource.

        unique hash of this version of the resource  # noqa: E501

        :param hash: The hash of this WorkspaceResource.
        :type hash: str
        """

        self._hash = hash

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WorkspaceResource.

        workspace_id  # noqa: E501

        :return: The workspace_id of this WorkspaceResource.
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WorkspaceResource.

        workspace_id  # noqa: E501

        :param workspace_id: The workspace_id of this WorkspaceResource.
        :type workspace_id: int
        """

        self._workspace_id = workspace_id

    @property
    def osbrepository_id(self):
        """Gets the osbrepository_id of this WorkspaceResource.

        osbrepository_id  # noqa: E501

        :return: The osbrepository_id of this WorkspaceResource.
        :rtype: int
        """
        return self._osbrepository_id

    @osbrepository_id.setter
    def osbrepository_id(self, osbrepository_id):
        """Sets the osbrepository_id of this WorkspaceResource.

        osbrepository_id  # noqa: E501

        :param osbrepository_id: The osbrepository_id of this WorkspaceResource.
        :type osbrepository_id: int
        """

        self._osbrepository_id = osbrepository_id
