# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workspaces.models.base_model_ import Model
from workspaces.models.repository_resource_node import RepositoryResourceNode
from workspaces import util

from workspaces.models.repository_resource_node import RepositoryResourceNode  # noqa: E501

class OSBRepositoryAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_resources=None, all_contexts=None, description=None):  # noqa: E501
        """OSBRepositoryAllOf - a model defined in OpenAPI

        :param context_resources: The context_resources of this OSBRepositoryAllOf.  # noqa: E501
        :type context_resources: List[RepositoryResourceNode]
        :param all_contexts: The all_contexts of this OSBRepositoryAllOf.  # noqa: E501
        :type all_contexts: List[str]
        :param description: The description of this OSBRepositoryAllOf.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'context_resources': List[RepositoryResourceNode],
            'all_contexts': List[str],
            'description': str
        }

        self.attribute_map = {
            'context_resources': 'context_resources',
            'all_contexts': 'all_contexts',
            'description': 'description'
        }

        self._context_resources = context_resources
        self._all_contexts = all_contexts
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'OSBRepositoryAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OSBRepository_allOf of this OSBRepositoryAllOf.  # noqa: E501
        :rtype: OSBRepositoryAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_resources(self):
        """Gets the context_resources of this OSBRepositoryAllOf.

        List of repository resources  # noqa: E501

        :return: The context_resources of this OSBRepositoryAllOf.
        :rtype: List[RepositoryResourceNode]
        """
        return self._context_resources

    @context_resources.setter
    def context_resources(self, context_resources):
        """Sets the context_resources of this OSBRepositoryAllOf.

        List of repository resources  # noqa: E501

        :param context_resources: The context_resources of this OSBRepositoryAllOf.
        :type context_resources: List[RepositoryResourceNode]
        """

        self._context_resources = context_resources

    @property
    def all_contexts(self):
        """Gets the all_contexts of this OSBRepositoryAllOf.

        List of repository contexts  # noqa: E501

        :return: The all_contexts of this OSBRepositoryAllOf.
        :rtype: List[str]
        """
        return self._all_contexts

    @all_contexts.setter
    def all_contexts(self, all_contexts):
        """Sets the all_contexts of this OSBRepositoryAllOf.

        List of repository contexts  # noqa: E501

        :param all_contexts: The all_contexts of this OSBRepositoryAllOf.
        :type all_contexts: List[str]
        """

        self._all_contexts = all_contexts

    @property
    def description(self):
        """Gets the description of this OSBRepositoryAllOf.

        Repository description  # noqa: E501

        :return: The description of this OSBRepositoryAllOf.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OSBRepositoryAllOf.

        Repository description  # noqa: E501

        :param description: The description of this OSBRepositoryAllOf.
        :type description: str
        """

        self._description = description
