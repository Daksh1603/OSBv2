/* tslint:disable */
/* eslint-disable */
/**
 * Workspaces manager API
 * Opensource Brain Platform - Reference Workspaces manager API
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FigshareRepositoryAllOf,
    FigshareRepositoryAllOfFromJSON,
    FigshareRepositoryAllOfFromJSONTyped,
    FigshareRepositoryAllOfToJSON,
    OSBRepositoryContext,
    OSBRepositoryContextFromJSON,
    OSBRepositoryContextFromJSONTyped,
    OSBRepositoryContextToJSON,
    RepositoryBase,
    RepositoryBaseFromJSON,
    RepositoryBaseFromJSONTyped,
    RepositoryBaseToJSON,
    RepositoryType,
    RepositoryTypeFromJSON,
    RepositoryTypeFromJSONTyped,
    RepositoryTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface FigshareRepository
 */
export interface FigshareRepository {
    /**
     * 
     * @type {number}
     * @memberof FigshareRepository
     */
    id?: number;
    /**
     * Repository name.
     * @type {string}
     * @memberof FigshareRepository
     */
    name: string;
    /**
     * 
     * @type {RepositoryType}
     * @memberof FigshareRepository
     */
    repositoryType: RepositoryType;
    /**
     * Comma separated set of Repository Content Types
     * @type {string}
     * @memberof FigshareRepository
     */
    repositoryContentTypes: string;
    /**
     * Auto sync of the resources
     * @type {boolean}
     * @memberof FigshareRepository
     */
    autoSync: boolean;
    /**
     * URI of the repository
     * @type {string}
     * @memberof FigshareRepository
     */
    uri: string;
    /**
     * Repository keycloak user id, will be automatically be set to the logged in user
     * @type {string}
     * @memberof FigshareRepository
     */
    userId?: string;
    /**
     * List of contexts with used/referenced resources in this repository
     * @type {Array<OSBRepositoryContext>}
     * @memberof FigshareRepository
     */
    usedContexts?: Array<OSBRepositoryContext>;
    /**
     * URL of the figshare repository
     * @type {string}
     * @memberof FigshareRepository
     */
    url: string;
}

export function FigshareRepositoryFromJSON(json: any): FigshareRepository {
    return FigshareRepositoryFromJSONTyped(json, false);
}

export function FigshareRepositoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): FigshareRepository {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'repositoryType': RepositoryTypeFromJSON(json['repository_type']),
        'repositoryContentTypes': json['repository_content_types'],
        'autoSync': json['auto_sync'],
        'uri': json['uri'],
        'userId': !exists(json, 'user_id') ? undefined : json['user_id'],
        'usedContexts': !exists(json, 'used_contexts') ? undefined : ((json['used_contexts'] as Array<any>).map(OSBRepositoryContextFromJSON)),
        'url': json['url'],
    };
}

export function FigshareRepositoryToJSON(value?: FigshareRepository | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'repository_type': RepositoryTypeToJSON(value.repositoryType),
        'repository_content_types': value.repositoryContentTypes,
        'auto_sync': value.autoSync,
        'uri': value.uri,
        'user_id': value.userId,
        'used_contexts': value.usedContexts === undefined ? undefined : ((value.usedContexts as Array<any>).map(OSBRepositoryContextToJSON)),
        'url': value.url,
    };
}


